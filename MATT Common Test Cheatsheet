# Introduction to Malware Analysis Tools & Techniques

## Definition of Malware
Malware is a software that is created with a `malicious intent`. It is used to `compromise computer functions`, `steal data`, `bypass access controls` and `cause harm to other host computers`

## Malware Symptoms
- Increased CPU usage
- Device slowing down
- Issues with internet connection
- Freezing / crashing
- Modified / Deleted Files
- New files appera
- Programs running, switched off or reconfigured
- Strange device behavious
- Emails / message sent without knowledge


## Types of Malware

|Malware|Malware Description|
|:---|:---|
|Adware|Type of malware that automatically delivers advertisement (Pop ups)|
|Bot|Program created to automatically perform specific operations|
|Bug|Flaw in a software that produces undesired outcomes. Security bugs are the most severe bugs and allow attackers to deliever exploits|
|Ransomware|Malware that holds computer system captive while demanding ransom|
|Rootkit|Malware to remotely access and control a device without being detected|
|Spyware|Malware to monitor user activity without their knowledge|
|Trojan Horse|Disguises as a normal file to trich users into installing the malware|
|Virus|Attach to files and programs and await for the execution to infect, Self replicating|
|Worm|Spread over the network|

## Overview of MATT
1. Basic Static Analysis
2. Basic Dynamic Analysis
3. Advanced Static Analysis
4. Advanced Dynamic Analysis

Static is not executing malware
Dynamic is executing the malware

### Basic Static Analysis
- Examine executable file without viewing actual instructions
- Can confirm if the file is malicious
- Straightforward and quick
- important behavious can be missed from complex malware

### Basic Dynamic Analysis
- Requires execution of malware 
- Observing the behaviours
- Require safe environment to run malware

### Advanced Static Analysis
- Reverse engineering
- loads executable in a disassembler
- look at the program instructions to discover functions of program
- Steeper learning curve
- require specialized knowledge on disassmbly, code construct and Windows OS

### Advanced Dynamic Analysis
- Execute Malware in a debugger
- View line by line to see what the code does
- Reverse Engineering
- extract detailed information from an executable
- most useful when attempting to gather information with other techniques

# Analysing Windows Malware

## What is Windows Malware?

- Most popular operating system
- Malware that interacts with the operating system
    - Uses Application Programing Interface (API) to execute

## Windows API

### Hungarian Notation

- Windows uses own naming for the different data types
- Identifier naming convention in computer programming
- Used for API function identifiers
- Use a prefix naming scheme to easily identify the type of variable

|Type and Prefix|Description|Size in Bytes|
|--|--|--|
|Word (w)|16-bit unsigned value|2 bytes|
|DWORD (dw)|A double-WORD, 32 bit unsigned value|4 bytes|
|Handles (H)|Reference to an object that is not documented and should only be manipulated by the Windows API|-|
|Long Pointer (LP)|A pointer to a data type. E.g. LPCSTR - Long Pointer Character String|-|
|Callback|Function called by Windows API|-|

### What is a Handle

- Items opened by thge Operating system.
- Point to a location in memory
- Handles can be stored for a later use
- Arithmatic operations cannot be performed

### File System Functions

Create File
    
    Create or open files

ReadFile / WriteFile

    - Used to read / write to files
    - Operates on file as a stream

CreateFileMapping and MapViewOfFile

    - Allows manipulation of files in the loaded memory
    - Provides easy manipulation therefore commonly used in malware
    - CreateFile Mapping loads file from disk to memory
    - MapViewOfFile returns pointer to base address of the mapping used to access file
    - The pointer at the base address used to read / write can navigate the file easily
    - extremely handy for parsing files

## Windows Registry

- Used to store OS and program configurations
- Good source of host-based indicators
- Uses a hierarchial database of information to improve performance
- Most configurations are in registries

### Why Malware uses registry?

- Persistence
- Configuration

### What is in the Registry

|Registry Terms|Purpose|
|--|--|
|Root Key|Registry is divided into 5 top-level sections called root key / hives. (HKEY)|
|Sub Key|Similar to sub folder to a folder|
|Key|can contain other folders. E.g. Root Key and Sub Key|
|Value Entry|Ordered Pair with name and value|
|Value or Data|Stored in the registry entry|

#### Root Keys

|Key Name|Stored Settings|
|--|--|
|HKEY_LOCAL_MACHINE(HKLM)|Global Settings for the machine|
|HKEY_CURRENT_USER(HKCU)|Specific settings for current user|
|HKEY_CLASSES_ROOT|Settings on Information defining types|
|HKEY_CURRENT_CONFIG|Settings on current hardware configurations|
|HKEY_USERS|Settings for the current user, new users and default users|

### What are the Common Registry Functions

|Function Name|Purpose|
|--|--|
|RegOpenKeyEx|Opens registry for querying or editing|
|RegSetValueEX|Add new value to the registry and set the data|
|RegGetValue|Returns the data for a value entry|

### Registry Tools

|Tools|Purpose|
|--|--|
|Regedit|To edit registry entries|
|Autoruns|Parse registry to find entries that start the applications on boot up|
|Regshot|Take a snapshot of the current state of the registry|

## Networking API

- Program uses socket to listen and send data to network
- Common API is located at WS2_32.dll

|Function|Description|
|--|--|
|socket|Creates a socket|
|bind|Attach a spclet to a particular port, prior to the acceot call|
|listen|Indicates that a socket will listen for incoming connections|
|accept|Opens a connection to a remote socket and accepts the connection|
|connect|Open a connection to a remote socket and the remote socket must be waiting for connection|
|recv|Recieves data from the remote socket|
|send|Sends data to the remote socket|

### Sniffers

1. Create a RAW Socket using WSASocket() / socket()
2. Bind socket to interface bind()
3. Put the interface into promiscuous mode.

Promiscuous mode

    Mode for wired netwoek interface controller that cause the controller to pass all traffic to a central processing unit instead of just to the controller intended to recieve.

## WinINET API

- Higher API implement higher level protocols
- InternetOpen

        Initialise a connection to the internet

- InternetOpenURL

        Connect to a URL

- URLDownloadToFileA

        Download a file from the internet

- InternetReadFile

        Read a file off the internet

### Downloaders

1. URLDownloadToFile() to download a file off the internet
2. ShellExecute() / WinExec() to exexute the newly downloaded file

## Process Manipulation

- Malware creates new processes to evade security within the system
- Win32 API is used - CreateProcess
    - used to create new processes
- The parameter STARTUPINFO includes a handle to standard input, output and error messages
- Malicious Programs can use the process to connect to sockets allowing remote shell execution

## Keyloggers

- Monitor users keystrokes
- Used to spy on users to collect information

### Common methods for Keyloggers

- Install a hook for keyboard events
- Poll Keyboard state with GetAsyncKeyState()

#### Hooking the keyboard

Hook - Mechanism to intercept actions made by user.

Hook Procedure - Function that intercepts certain types of event

Act on events and modify / discard the event

- API: SetWindowsHookExA
    - Called with WH_KEYBOARD parameter
    - event is relayed to the malicious function when the kwy is pressed

- API: SetWindowsHookExA
    - Called with WH_MOUSE parameter
    - Intercepts mouse click messages

### Polling the Keyboard

- Malware goes into a loop
- Malware poll the state of every key
- GetAsyncKeyState is called to get hte state of a specific key
- Parameter is the key being pressed

